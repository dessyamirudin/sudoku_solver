plot(Boston$crim,Boston$medv)
obs   = runif(1000,0,1)
obs
obs   = ifelse(runif(1000,0,1)>0.7,1,0)
pred  = ifelse(runif(1000,0,1)>0.75,1,0)
head(obs)
head(pred)
table(obs,pred)
obs   = ifelse(runif(1000,0,1)>0.7,"True","False")
pred  = ifelse(runif(1000,0,1)>0.75,"True","False")
table(obs,pred)
prob.table(table(obs,pred))
prop.table(table(obs,pred))
prop.table(table(obs,pred),1)
prop.table(table(obs,pred),2)
library(ROCR)
confusionMatrix(pred,obs)
confusionMatrix(data=pred,reference=obs,positive = "True")
library(e1071)
install.packages(e1071)
install.packages('e1071')
library(e1071)
confusionMatrix(data=pred,reference=obs,positive = "True")
pred.prob = runif(1000,0,1)
pred  = ifelse(pred.prob>0.75,"True","False")
table(obs,pred)
prop.table(table(obs,pred))
prop.table(table(obs,pred),1)
prop.table(table(obs,pred),2)
confusionMatrix(data=pred,reference=obs,positive = "True")
pred.val = prediction(pred.prob,obs)
perf = performance(pred.val,measure="tpr",x.measure = "fpr")
plot(perf)
auc.perf = performance(pred, measure = "auc")
auc.perf = performance(pred.val, measure = "auc")
auc.perf@y.values
head(GermanCredit)
set.seed(123)
sample.class = sample.split(GermanCredit$Class,SplitRatio = 0.7)
train.German = GermanCredit[sample.class,]
test.German = GermanCredit[!sample.class,]
model.German = glm(Class~.,data=train.German,family = binomial())
pred.test = predict(model.German,test.German,type="response")
head(pred.test)
class.test = predict(model.German,test.German)
head(class.test)
class.test = predict(model.German,test.German, type = "class")
class.test = predict(model.German,test.German, type = "terms")
head(class.test)
class.test = predict(model.German,test.German, type = "link")
head(class.test)
table(GermanCredit$Class)
table(test.German$Class,class.test)
head(class.test)
head(pred.test)
class.test = ifelse(pred.test>=0.5,"Good","Bad")
table(test.German$Class,class.test)
prop.table(table(test.German$Class,class.test))
prop.table(table(test.German$Class,class.test),1)
prop.table(table(test.German$Class,class.test),2)
confusionMatrix(data=class.test,reference=test.German$Class,positive = "Good")
pred.German = prediction(pred.test,test.German$Class)
perf = performance(pred.German,measure="tpr",x.measure = "fpr")
plot(perf)
pred.German = prediction(pred.test,test.German$Class)
perf.German = performance(pred.German,measure="tpr",x.measure = "fpr")
plot(perf.German)
auc.perf.German = performance(pred.German, measure = "auc")
auc.perf.German@y.values
library(rpart)
boston.tree = rpart(medv~.,data=train)
pred.tree = predict(boston.tree,test)
plot(pred.tree,test$medv)
r2(pred.tree,test$medv)
r2(boston.pred,test$medv)
summary(boston.lm)
library(caret)
library(AppliedPredictiveModeling)
library(caTools)
library(tidyverse)
library(ROCR)
library(e1071)
library(rpart)
observed <- c(0.22, 0.83, -0.12, 0.89, -0.23, -1.30, -0.15, -1.4,
+ 0.62, 0.99, -0.18, 0.32, 0.34, -0.30, 0.04, -0.87,
+ 0.55, -1.30, -1.15, 0.20)
predicted <- c(0.24, 0.78, -0.66, 0.53, 0.70, -0.75, -0.41, -0.43,
+ 0.49, 0.79, -1.19, 0.06, 0.75, -0.07, 0.43, -0.42,
+ -0.25, -0.64, -1.26, -0.07)
residualValue = observed-predicted
axisRange <- extendrange(c(observed, predicted))
plot(observed, predicted,ylim = axisRange,xlim = axisRange)
abline(0, 1, col = "darkgrey", lty = 2)
plot(predicted, residualValue, ylab = "residual")
abline(h = 0, col = "darkgrey", lty = 2)
rmse <- function(observed,predicted)
{
return(sqrt(mean((observed-predicted)^2)))
}
mae <- function(observed,predicted)
{
return(mean(abs(observed-predicted)))
}
rmse(observed,predicted)
mae(observed,predicted)
observed.2 = observed*10
predicted.2 = predicted*10
rmse(observed.2,predicted.2)
mae(observed.2,predicted.2)
plot(observer.2,predicted.2)
plot(observed.2,predicted.2)
r2 <- function(observed,predicted){
return(cor(observed,predicted)^2)
}
r2(observed,predicted)
r2(observed.2,predicted.2)
data('Boston')
head(Boston)
?AppliedPredictiveModeling
?caret
data('Boston')
library(MASS)
set.seed(123)
sample = sample.split(Boston,SplitRatio = 0.8)
train = Boston[sample,]
test=Boston[!sample,]
boston.lm = lm(medv~.,data=train)
summary(boston.lm)
boston.pred.train = predict(boston.lm,train)
boston.pred = predict(boston.lm,test)
plot(boston.pred,test$medv)
abline(0, 1, col = "darkgrey", lty = 2)
plot(boston.pred,test$medv)
rmse(boston.pred.train,train$medv)
mae(boston.pred.train,train$medv)
r2(boston.pred.train,train$medv)
rmse(boston.pred,test$medv)
mae(boston.pred,test$medv)
r2(boston.pred,test$medv)
set.seed(123)
obs   = ifelse(runif(1000,0,1)>0.7,"True","False")
table(obs)
pred.prob = runif(1000,0,1)
head(pred.prob)
pred  = ifelse(pred.prob>0.75,"True","False")
table(obs,pred)
538+77
615/1000
prop.table(table(obs,pred))
prop.table(table(obs,pred),1)
prop.table(table(obs,pred),2)
confusionMatrix(data=pred,reference=obs,positive = "True")
pred=as.factor(pred)
pred2 = ifelse(pred.prob>0.5,"True","False")
confusionMatrix(data=pred2,reference=obs,positive = "True")
pred.val = prediction(pred.prob,obs)
perf = performance(pred.val,measure="tpr",x.measure = "fpr")
plot(perf)
auc.perf = performance(pred.val, measure = "auc")
auc.perf@y.values
data("GermanCredit")
set.seed(123)
sample.class = sample.split(GermanCredit$Class,SplitRatio = 0.7)
train.German = GermanCredit[sample.class,]
test.German = GermanCredit[!sample.class,]
head(GermanCredit)
model.German = glm(Class~.,data=train.German,family = binomial())
pred.test = predict(model.German,test.German,type="response")
pred.test = predict(model.German,test.German)
pred.test = predict(model.German,test.German,type="response")
pred.test.nores = predict(model.German,test.German)
head(pred.test)
head(pred.test.nores)
class.test = ifelse(pred.test>=0.5,"Good","Bad")
table(test.German$Class,class.test)
confusionMatrix(data=class.test,reference=test.German$Class,positive = "Good")
table(GermanCredit$Class)
pred.German = prediction(pred.test,test.German$Class)
perf.German = performance(pred.German,measure="tpr",x.measure = "fpr")
plot(perf.German)
auc.perf.German = performance(pred.German, measure = "auc")
auc.perf.German@y.values
german.rf=randomForest(Class~.,train.German,ntree=500)
library(randomForest)
german.rf=randomForest(Class~.,train.German,ntree=500)
summary(german.rf)
pred.german.rf = predict(german.rf,test.German)
head(pred.german.rf)
confusionMatrix(data=pred.german.rf,reference=test.German$Class,positive="Good")
german.rf=randomForest(Class~.,train.German,ntree=1000)
pred.german.rf = predict(german.rf,test.German)
confusionMatrix(data=pred.german.rf,reference=test.German$Class,positive="Good")
german.rf=randomForest(Class~.,train.German,ntree=1000,mtry=30)
pred.german.rf = predict(german.rf,test.German)
confusionMatrix(data=pred.german.rf,reference=test.German$Class,positive="Good")
german.rf=randomForest(Class~.,train.German,ntree=1000,mtry=40)
pred.german.rf = predict(german.rf,test.German)
confusionMatrix(data=pred.german.rf,reference=test.German$Class,positive="Good")
german.rf=randomForest(Class~.,train.German,ntree=1000,mtry=20)
pred.german.rf = predict(german.rf,test.German)
confusionMatrix(data=pred.german.rf,reference=test.German$Class,positive="Good")
german.rf=randomForest(Class~.,train.German,ntree=1000,mtry=10)
pred.german.rf = predict(german.rf,test.German)
confusionMatrix(data=pred.german.rf,reference=test.German$Class,positive="Good")
auc.perf.German@y.values
german.rf=randomForest(Class~.,train.German,ntree=1000)
pred.german.rf = predict(german.rf,test.German)
confusionMatrix(data=pred.german.rf,reference=test.German$Class,positive="Good")
german.rf=randomForest(Class~.,train.German,ntree=1000)
pred.german.rf = predict(german.rf,test.German)
confusionMatrix(data=pred.german.rf,reference=test.German$Class,positive="Good")
pred.German.rf = prediction(pred.german.rf,test.German$Class)
data1= rnorm(1000,mean=0,sd=1)
hist (data1)
data1s = data1^2
hist(data1s)
hist(data1s,n=100)
data2 = rnorm(1000,mean=0,sd=1)
hist(data2)
data1.data2=data1^2+data2^2
hist(data1.data2)
hist(data1.data2,n=100)
data3 = rnorm(1000,mean=0,sd=1)
hist(data3)
data1.data2.data3=data1^2+data2^2+data3^2
hist(data1.data2.data3,n=100)
rep(NA,2)
x = NA
x
x+c(1,2,3)
x=rep(0,3)
x
x+c(1,2,3)
ChiSqGenerator = function(sample,df){
chis.data = rep(0,sample)
for(i in 1:df){
norm.data = rnorm(sample,mean=0,sd=1)
chis.data = chis.data+norm.data^2
}
return(chis.data)
}
hist(ChiSqGenerator(10000,1))
hist(ChiSqGenerator(10000,1),100)
hist(ChiSqGenerator(n.sample,1),n.bin)
n.sample = 10000
n.bin = 100
hist(ChiSqGenerator(n.sample,1),n.bin)
hist(ChiSqGenerator(n.sample,2),n.bin)
hist(ChiSqGenerator(n.sample,3),n.bin)
hist(ChiSqGenerator(n.sample,4),n.bin)
hist(ChiSqGenerator(n.sample,5),n.bin)
hist(ChiSqGenerator(n.sample,6),n.bin)
hist(ChiSqGenerator(n.sample,7),n.bin)
hist(ChiSqGenerator(n.sample,7),n.bin)
hist(ChiSqGenerator(n.sample,8),n.bin)
hist(ChiSqGenerator(n.sample,9),n.bin)
hist(ChiSqGenerator(n.sample,10),n.bin)
hist(ChiSqGenerator(n.sample,10),n.bin)
n.sample = 100000
n.bin = 1000
hist(ChiSqGenerator(n.sample,1),n.bin)
hist(ChiSqGenerator(n.sample,2),n.bin)
hist(ChiSqGenerator(n.sample,3),n.bin)
hist(ChiSqGenerator(n.sample,4),n.bin)
hist(ChiSqGenerator(n.sample,5),n.bin)
hist(ChiSqGenerator(n.sample,6),n.bin)
hist(ChiSqGenerator(n.sample,7),n.bin)
hist(ChiSqGenerator(n.sample,8),n.bin)
hist(ChiSqGenerator(n.sample,9),n.bin)
hist(ChiSqGenerator(n.sample,10),n.bin)
n.sample = 100000
n.bin = 100
hist(ChiSqGenerator(n.sample,1),n.bin)
hist(ChiSqGenerator(n.sample,2),n.bin)
hist(ChiSqGenerator(n.sample,3),n.bin)
hist(ChiSqGenerator(n.sample,4),n.bin)
hist(ChiSqGenerator(n.sample,5),n.bin)
hist(ChiSqGenerator(n.sample,6),n.bin)
hist(ChiSqGenerator(n.sample,7),n.bin)
hist(ChiSqGenerator(n.sample,8),n.bin)
hist(ChiSqGenerator(n.sample,9),n.bin)
n.sample = 100000
n.bin = 100000
hist(ChiSqGenerator(n.sample,1),n.bin)
hist(ChiSqGenerator(n.sample,1),n.bin)
n.sample = 100000
n.bin = 100
hist(ChiSqGenerator(n.sample,1),n.bin)
hist(ChiSqGenerator(n.sample,2),n.bin)
hist(ChiSqGenerator(n.sample,3),n.bin)
hist(ChiSqGenerator(n.sample,4),n.bin)
hist(ChiSqGenerator(n.sample,5),n.bin)
hist(ChiSqGenerator(n.sample,6),n.bin)
hist(ChiSqGenerator(n.sample,7),n.bin)
hist(ChiSqGenerator(n.sample,8),n.bin)
hist(ChiSqGenerator(n.sample,9),n.bin)
hist(ChiSqGenerator(n.sample,10),n.bin)
d.1 = density(ChiSqGenerator(n.sample,1))
plot(d.1)
d.2 = density(ChiSqGenerator(n.sample,2))
plot(d.2)
d.3 = density(ChiSqGenerator(n.sample,3))
plot(d.3)
d.4 = density(ChiSqGenerator(n.sample,4))
plot(d.4)
d.5 = density(ChiSqGenerator(n.sample,5))
plot(d.5)
d.6 = density(ChiSqGenerator(n.sample,6))
plot(d.6)
d.7 = density(ChiSqGenerator(n.sample,7))
plot(d.7)
d.8 = density(ChiSqGenerator(n.sample,8))
plot(d.8)
d.9 = density(ChiSqGenerator(n.sample,9))
plot(d.9)
d.10 = density(ChiSqGenerator(n.sample,10))
plot(d.10)
plot(cars)
# loading library
library(rJava) #need to update java
library(RJDBC)
library(tidyverse)
# change path of JDBC driver
.jinit()
drv = JDBC("com.treasuredata.jdbc.TreasureDataDriver",
"D:/Toyota/td-jdbc-0.5.10-jar-with-dependencies.jar",
identifier.quote='"')
# connect to TD
con = dbConnect(drv,
"jdbc:td://api.treasuredata.com/database_predictive_model;useSSL=true",
type="presto",
apikey="10546/12f4b509cc4d80146c1c48f5b607cf9d882cac44")
# check the list of tables
dbListTables(con)
# check column name in
dbListFields(con,"table_predictive_model_22_may_noduplicate")
# check table of interest
data.file = tbl(con,"table_predictive_model_22_may_noduplicate")
head(data.file)
View(data.file)
# check table of interest
data.file = data.frame(tbl(con,"table_predictive_model_22_may_noduplicate"))
head(data.file)
table(data.file$duplicatecount)
table(data.file$buy)
data.file$time=NULL
View(data.file)
data.file$duplicatecount=NULL
data.file$score = runif(nrow(data.file),0,100)
# write tabel to database
dbWriteTable(con, name = "from_R_database", value = data.file, row.names = FALSE)
# check the list of tables
dbListTables(con)
library(DBI)
# write tabel to database
dbWriteTable(con, name = "from_R_database", value = data.file, row.names = FALSE)
# write tabel to database
dbWriteTable(con, name = "from_r_database", value = data.file[,1:11], row.names = FALSE)
# write tabel to database
dbWriteTable(con, name = "from_r_database", value = data.file[,1], row.names = FALSE)
y<-1:4
y
library(dplyr)
install.packages("dplyr")
library(dplyr)
shiny::runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
rupApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
GET /repos/hadley/httr HTTP/1.1
install.packages("httr")
library(httr)
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
GET(url)
}
resp <- github_api("/repos/hadley/httr")
View(resp)
resp
path = "/repos/hadley/httr"
modify_url("https://api.github.com", path = path)
github_api <- function(path) {
# url <- modify_url("https://api.github.com", path = path)
url <- paste("https://api.github.com", path)
# change modify_url to paste. is is possible?
GET(url)
}
resp <- github_api("/repos/hadley/httr")
modify_url("https://api.github.com", path = path)
str(modify_url("https://api.github.com", path = path))
paste("https://api.github.com", path)
github_api <- function(path) {
# url <- modify_url("https://api.github.com", path = path)
url <- paste("https://api.github.com", path,sep="")
# change modify_url to paste. is is possible?
GET(url)
}
resp <- github_api("/repos/hadley/httr")
resp
GET("http://www.colourlovers.com/api/color/6B4106?format=xml")
GET("http://www.colourlovers.com/api/color/6B4106?format=json")
# understand the response
http_type(resp)
library(devtools)
install.packages('glue')
library(devtools)
devtools::install_github("dessyamirudin/similaRText")
library(similaRText)
similaRText::text_similarity_score("southkorea","South Korea")
?text_similarity_id
?text_similarity_score
remove.packages(similaRText)
library(similaRText)
library(similaRText)
library(devtools)
devtools::install_github("similaRText")
devtools::install_github("dessyamirudin/similaRText")
library(similaRText)
library(devtools)
devtools::install_github("dessyamirudin/similaRText")
getwd()
setwd("D:/R Book/sudoku")
shiny::runApp()
# Setup the data
m <- matrix(c(8,3,4,1,5,9,6,7,2), nrow=3, ncol=3)
df <- expand.grid(x=1:ncol(m),y=1:nrow(m))
df$val <- m[as.matrix(df[c('y','x')])]
library(ggplot2)
library(scales)
ggplot(df, aes(x=x, y=y, label=val)) +
geom_tile(fill='transparent', colour = 'black') +
geom_text(size = 14) +
scale_y_reverse() +
theme_classic() +
theme(axis.text  = element_blank(),
panel.grid = element_blank(),
axis.line  = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())
input = "00430020900500900107006004300600208719000740005008300060000010500350869004291030"
# try to create 9 x 9 grid
library(tidyverse)
input
input_split = str_split(input, pattern="")
View(input_split)
input_split
# create matrix
input_matrix = matrix(unlist(input_split), nrow = 9, byrow = TRUE)
input_matrix
# plotting
input_df = expand.grid(x=1:ncol(m), y=1:nrow(m))
input_df
# plotting
input_df = expand.grid(x=1:ncol(input_matrix), y=1:nrow(input_matrix))
input_df
as.matrix(input_df[c('y','x')])
input_df$val = input_matrix[as.matrix(input_df[c('y','x')])]
input_df
input_matrix[1,1]
input_matrix[as.matrix[1,1]]
input_matrix[as.matrix[c(1,1)]]
input_df[c('y','x')]
as.matrix(input_df[c('y','x')])
met = as.matrix(input_df[c('y','x')])
met[1,1]
met[1,]
input_matrix[met[1,]]
input_matrix[met[1,1]]
input_matrix[met[2,]]
met
met[2,]
met[3,]
ggplot(input_df, aes(x=x, y=y, label=val)) +
geom_tile(fill='transparent', colour = 'black') +
geom_text(size = 14) +
scale_y_reverse() +
theme_classic() +
theme(axis.text  = element_blank(),
panel.grid = element_blank(),
axis.line  = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())
ggplot(input_df, aes(x=x, y=y, label=val)) +
geom_tile(fill='transparent', colour = 'black') +
geom_text(size = 14) +
scale_y_reverse() +
theme_classic() +
theme(axis.text  = element_blank(),
panel.grid = element_blank(),
axis.line  = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())
ggplot(input_df, aes(x=x, y=y, label=val)) +
geom_tile(fill='transparent', colour = 'black') +
geom_text(size = 10) +
scale_y_reverse() +
theme_classic() +
theme(axis.text  = element_blank(),
panel.grid = element_blank(),
axis.line  = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())
ggplot(input_df, aes(x=x, y=y, label=val)) +
geom_tile(fill='transparent', colour = 'black') +
geom_text(size = 8) +
scale_y_reverse() +
theme_classic() +
theme(axis.text  = element_blank(),
panel.grid = element_blank(),
axis.line  = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())
